name: Test Application

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test Docker build
        run: |
          docker build -t vehicle-insurance:test .

      - name: Run Docker container
        run: |
          # Run container with testing environment
          docker run -d --name test-container -e ENVIRONMENT="testing" -p 5050:5050 vehicle-insurance:test
          sleep 10  # Wait for container to start

      - name: Check container health
        run: |
          # Check if container is running
          if [ "$(docker inspect -f {{.State.Running}} test-container)" = "true" ]; then
            echo "Container is running"
          else
            echo "Container is not running"
            docker logs test-container
            exit 1
          fi

          # Check health endpoint
          HEALTH_STATUS=$(curl -s http://localhost:5050/health | grep -o '"status":"[^"]*"' | cut -d'"' -f4)
          if [ "$HEALTH_STATUS" = "healthy" ]; then
            echo "Health check passed"
          else
            echo "Health check failed"
            curl -s http://localhost:5050/health
            exit 1
          fi

      - name: Clean up
        run: |
          docker stop test-container
          docker rm test-container
