name: Deploy Vehicle Insurance Prediction App to EC2

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual triggering

jobs:
  Continuous-Integration:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
          IMAGE_TAG: latest
        run: |
          # Print debug information
          echo "ECR Registry: $ECR_REGISTRY"
          echo "ECR Repository: $ECR_REPOSITORY"
          echo "Image Tag: $IMAGE_TAG"

          # Check if ECR repository exists, create if it doesn't
          echo "Checking if ECR repository exists..."
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY || aws ecr create-repository --repository-name $ECR_REPOSITORY

          # Build the Docker image with detailed output
          echo "Building Docker image..."
          docker build --no-cache -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

          # Verify the image was built
          echo "Verifying Docker image..."
          docker images | grep $ECR_REPOSITORY

          # Push the Docker image with detailed output
          echo "Pushing Docker image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          # Set output for use in deployment job (using new GitHub Actions syntax)
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  Continuous-Deployment:
    needs: Continuous-Integration
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Run Docker Image to serve users
        run: |
          # Stop any existing container
          echo "Stopping any existing containers..."
          docker ps -q --filter "name=vehicle-insurance" | grep -q . && docker stop $(docker ps -q --filter "name=vehicle-insurance") && docker rm $(docker ps -aq --filter "name=vehicle-insurance") || echo "No existing container found"

          # Pull the latest image
          echo "Pulling the latest image..."
          docker pull "${{ steps.login-ecr.outputs.registry }}"/"${{ secrets.ECR_REPO }}":latest

          # Run the new container
          echo "Starting new container..."

          # Check if MONGODB_URL secret exists
          if [[ "${{ secrets.MONGODB_URL }}" != "" ]]; then
            echo "Using provided MongoDB URL from secrets"
            docker run -d \
              --name vehicle-insurance \
              -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
              -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
              -e AWS_DEFAULT_REGION="${{ secrets.AWS_DEFAULT_REGION }}" \
              -e MONGODB_URL="${{ secrets.MONGODB_URL }}" \
              -e ENVIRONMENT="production" \
              -p 5050:5050 \
              "${{ steps.login-ecr.outputs.registry }}"/"${{ secrets.ECR_REPO }}":latest
          else
            echo "No MongoDB URL provided, using sample data"
            docker run -d \
              --name vehicle-insurance \
              -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
              -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
              -e AWS_DEFAULT_REGION="${{ secrets.AWS_DEFAULT_REGION }}" \
              -e ENVIRONMENT="testing" \
              -p 5050:5050 \
              "${{ steps.login-ecr.outputs.registry }}"/"${{ secrets.ECR_REPO }}":latest
          fi

          echo "Container started successfully!"
